// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudyShare.Infrastructure.Database;

#nullable disable

namespace StudyShare.Infrastructure.Migrations
{
    [DbContext(typeof(StudyShareDbContext))]
    partial class StudyShareDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("StudyShare.Domain.Entities.ClassLevel", b =>
                {
                    b.Property<int>("ClassLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClassLevelId"));

                    b.Property<string>("ClassLevelName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ClassLevelId");

                    b.ToTable("ClassLevels");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.Keyword", b =>
                {
                    b.Property<int>("KeywordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("KeywordId"));

                    b.Property<string>("KeywordName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("KeywordId");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.Paper", b =>
                {
                    b.Property<int>("PaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaperId"));

                    b.Property<string>("PaperDescription")
                        .HasColumnType("longtext");

                    b.Property<int>("PaperDownloadsNumber")
                        .HasColumnType("int");

                    b.Property<string>("PaperName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaperPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PaperUploadDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("PaperVisibility")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaperId");

                    b.HasIndex("UserId");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.PaperClassLevel", b =>
                {
                    b.Property<int>("PaperId")
                        .HasColumnType("int");

                    b.Property<int>("ClassLevelId")
                        .HasColumnType("int");

                    b.HasKey("PaperId", "ClassLevelId");

                    b.HasIndex("ClassLevelId");

                    b.ToTable("PaperClassLevels");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.PaperKeyword", b =>
                {
                    b.Property<int>("PaperId")
                        .HasColumnType("int");

                    b.Property<int>("KeywordId")
                        .HasColumnType("int");

                    b.HasKey("PaperId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("PaperKeywords");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SchoolId"));

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SchoolId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserFirstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserLastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("tbl_user");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            UserEmail = "cyril@gmail.com",
                            UserFirstname = "Cyril",
                            UserLastname = "CHERRIER",
                            UserPassword = "motdepasse"
                        },
                        new
                        {
                            UserId = 2,
                            UserEmail = "leila@gmail.com",
                            UserFirstname = "Leila",
                            UserLastname = "BRAHO",
                            UserPassword = "motdepasse"
                        });
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.UserClassLevel", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ClassLevelId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ClassLevelId");

                    b.HasIndex("ClassLevelId");

                    b.ToTable("UserClassLevels");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.UserSchool", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SchoolId");

                    b.HasIndex("SchoolId");

                    b.ToTable("UserSchools");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.UserWorkGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkGroupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "WorkGroupId");

                    b.HasIndex("WorkGroupId");

                    b.ToTable("UserWorkGroups");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.WorkGroup", b =>
                {
                    b.Property<int>("WorkGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WorkGroupId"));

                    b.Property<string>("WorkGroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("WorkGroupId");

                    b.ToTable("WorkGroups");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.Paper", b =>
                {
                    b.HasOne("StudyShare.Domain.Entities.User", "User")
                        .WithMany("Paper")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.PaperClassLevel", b =>
                {
                    b.HasOne("StudyShare.Domain.Entities.ClassLevel", "ClassLevel")
                        .WithMany("PaperClassLevel")
                        .HasForeignKey("ClassLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyShare.Domain.Entities.Paper", "Paper")
                        .WithMany("PaperClassLevel")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassLevel");

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.PaperKeyword", b =>
                {
                    b.HasOne("StudyShare.Domain.Entities.Keyword", "Keyword")
                        .WithMany("PaperKeyword")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyShare.Domain.Entities.Paper", "Paper")
                        .WithMany("PaperKeyword")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.UserClassLevel", b =>
                {
                    b.HasOne("StudyShare.Domain.Entities.ClassLevel", "ClassLevel")
                        .WithMany("UserClassLevel")
                        .HasForeignKey("ClassLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyShare.Domain.Entities.User", "User")
                        .WithMany("UserClassLevel")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.UserSchool", b =>
                {
                    b.HasOne("StudyShare.Domain.Entities.School", "School")
                        .WithMany("UserSchool")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyShare.Domain.Entities.User", "User")
                        .WithMany("UserSchool")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.UserWorkGroup", b =>
                {
                    b.HasOne("StudyShare.Domain.Entities.User", "User")
                        .WithMany("UserWorkGroup")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyShare.Domain.Entities.WorkGroup", "WorkGroup")
                        .WithMany("UserWorkGroup")
                        .HasForeignKey("WorkGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.ClassLevel", b =>
                {
                    b.Navigation("PaperClassLevel");

                    b.Navigation("UserClassLevel");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.Keyword", b =>
                {
                    b.Navigation("PaperKeyword");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.Paper", b =>
                {
                    b.Navigation("PaperClassLevel");

                    b.Navigation("PaperKeyword");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.School", b =>
                {
                    b.Navigation("UserSchool");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.User", b =>
                {
                    b.Navigation("Paper");

                    b.Navigation("UserClassLevel");

                    b.Navigation("UserSchool");

                    b.Navigation("UserWorkGroup");
                });

            modelBuilder.Entity("StudyShare.Domain.Entities.WorkGroup", b =>
                {
                    b.Navigation("UserWorkGroup");
                });
#pragma warning restore 612, 618
        }
    }
}
